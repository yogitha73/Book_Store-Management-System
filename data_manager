import json
import os
from datetime import datetime
from typing import Dict, List, Optional

class DataManager:
    """Handles all data operations for the bookstore system"""
    
    def __init__(self, data_file: str = 'data/books.json'):
        self.data_file = data_file
        self.ensure_data_file_exists()
    
    def ensure_data_file_exists(self):
        """Ensure the data directory and file exist"""
        os.makedirs(os.path.dirname(self.data_file), exist_ok=True)
        
        if not os.path.exists(self.data_file):
            initial_data = {
                'books': [],
                'next_id': 1,
                'last_updated': datetime.now().isoformat()
            }
            self._save_data(initial_data)
    
    def _load_data(self) -> Dict:
        """Load data from JSON file"""
        try:
            with open(self.data_file, 'r', encoding='utf-8') as file:
                return json.load(file)
        except (FileNotFoundError, json.JSONDecodeError) as e:
            raise Exception(f"Failed to load data: {str(e)}")
    
    def _save_data(self, data: Dict):
        """Save data to JSON file"""
        try:
            data['last_updated'] = datetime.now().isoformat()
            with open(self.data_file, 'w', encoding='utf-8') as file:
                json.dump(data, file, indent=2, ensure_ascii=False)
        except Exception as e:
            raise Exception(f"Failed to save data: {str(e)}")
    
    def get_all_books(self) -> List[Dict]:
        """Get all books from the database"""
        data = self._load_data()
        return data.get('books', [])
    
    def get_book_by_id(self, book_id: int) -> Optional[Dict]:
        """Get a specific book by ID"""
        books = self.get_all_books()
        for book in books:
            if book['id'] == book_id:
                return book
        return None
    
    def get_book_by_isbn(self, isbn: str) -> Optional[Dict]:
        """Get a specific book by ISBN"""
        books = self.get_all_books()
        for book in books:
            if book['isbn'] == isbn:
                return book
        return None
 def book_exists_by_isbn(self, isbn: str) -> bool:
        """Check if a book with the given ISBN exists"""
        return self.get_book_by_isbn(isbn) is not None
    
    def create_book(self, book_data: Dict) -> Dict:
        """Create a new book"""
        data = self._load_data()
        
        # Create new book with ID
        new_book = {
            'id': data['next_id'],
            'title': book_data['title'].strip(),
            'author': book_data['author'].strip(),
            'isbn': book_data['isbn'].strip(),
            'price': float(book_data['price']),
            'quantity': int(book_data['quantity']),
            'created_at': datetime.now().isoformat(),
            'updated_at': datetime.now().isoformat()
        }
        
        # Add optional fields
        if 'description' in book_data and book_data['description']:
            new_book['description'] = book_data['description'].strip()
        if 'genre' in book_data and book_data['genre']:
            new_book['genre'] = book_data['genre'].strip()
        
        # Add book to data
        data['books'].append(new_book)
        data['next_id'] += 1
 # Save data
        self._save_data(data)
        
        return new_book
    
    def update_book(self, book_id: int, update_data: Dict) -> Dict:
        """Update an existing book"""
        data = self._load_data()
        
        # Find the book
        book_index = None
        for i, book in enumerate(data['books']):
            if book['id'] == book_id:
                book_index = i
                break
        
        if book_index is None:
            raise Exception(f"Book with ID {book_id} not found")
        
        # Update the book
        book = data['books'][book_index]
        
        # Update fields that are provided
        updatable_fields = ['title', 'author', 'isbn', 'price', 'quantity', 'description', 'genre']
        for field in updatable_fields:
            if field in update_data and update_data[field] is not None:
                if field in ['title', 'author', 'isbn', 'description', 'genre']:
                    book[field] = update_data[field].strip()
                elif field == 'price':
                    book[field] = float(update_data[field])
                elif field == 'quantity':
                    book[field] = int(update_data[field])
        
        book['updated_at'] = datetime.now().isoformat()
        
        
